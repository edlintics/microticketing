"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
var Listener = /** @class */ (function () {
    function Listener(client) {
        this.ackWait = 5 * 1000; // Number of seconds this listerner has to ack a message
        this.client = client;
    }
    Listener.prototype.subscriptionOptions = function () {
        // deafault subscription options
        return this.client
            .subscriptionOptions()
            .setDeliverAllAvailable() // upload all events have been recorded(hellping for durable subscription later) (only happen in the first time when we created a new service)
            .setManualAckMode(true) // enable us to manually decide how to process with the event, avoid the lost ofevents in case server down
            .setAckWait(this.ackWait)
            .setDurableName(this.queueGroupName); // store a record of processed and non preocessed event in database in NATS file event, thus, this help to proceed events if the service is down
    };
    Listener.prototype.listen = function () {
        // every 30 seconds wil send to diffrent instance of the service until the event is processed
        var _this = this;
        // code to set up the subscription
        var subscription = this.client.subscribe(this.subject, this.queueGroupName, // use to manage instance of the same class, enable when service down doents wipe out teh durable subscription
        this.subscriptionOptions());
        subscription.on("message", function (msg) {
            // message is the same thinga as event in microservice
            console.log("Message received: " + _this.subject + " / " + _this.queueGroupName);
            var parsedData = _this.parseMessage(msg);
            _this.onMessage(parsedData, msg);
        });
    };
    Listener.prototype.parseMessage = function (msg) {
        // helper function to parse a message
        var data = msg.getData();
        return typeof data === "string"
            ? JSON.parse(data) // hadnle a string
            : JSON.parse(data.toString("utf8")); // handle a buffer
    };
    return Listener;
}());
exports.Listener = Listener;
